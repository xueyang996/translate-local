{
  "# Paste to Markdown\n\n## Instructions\n\n1.  Find the text to convert to Markdown (_e.g._, in another browser tab)\n2.  Copy it to the clipboard (`Ctrl+C`, or `⌘+C` on Mac)\n3.  Paste it into this window (`Ctrl+V`, or `⌘+V` on Mac)\n4.  The converted Markdown will appear!\n\nThe conversion is carried out by [to-markdown](https://github.com/domchristie/to-markdown), a Markdown converter written in JavaScript and running locally in the browser.": "# 粘贴到Markdown\n\n##说明\n\n1.  找到要转换为Markdown的文本（例如_，在另一个浏览器标签中） 2.  把它复制到剪贴板（`Ctrl+C`，或者Mac上的`⌘+C`） 3.  粘贴到这个窗口（`Ctrl+V`，或者Mac上的`⌘+V`） 4.  转换后的Markdown将出现!\n\n转换是由[to-markdown](https://github.com/domchristie/to-markdown)进行的，这是一个用JavaScript编写的Markdown转换器，在浏览器中本地运行。",
  "Fresh is a full stack modern web framework for JavaScript and TypeScript developers, designed to make it trivial to create high-quality, performant, and personalized web applications. You can use it to create your home page, a blog, a large web application like GitHub or Twitter, or anything else you can think of.\n\nAt its core, Fresh is a combination of a routing framework and templating engine that renders pages on demand, on the server. In addition to this just-in-time (JIT) rendering on the server, Fresh also provides an interface for seamlessly rendering some components on the client for maximum interactivity. The framework uses [Preact](https://preactjs.com/) and JSX for rendering and templating on both the server and the client.\n\nFresh also does not have a build step. The code you write is also directly the code that is run on the server, and the code that is executed on the client. Any necessary transpilation of TypeScript or JSX to plain JavaScript is done on the fly, just when it is needed. This allows for insanely fast iteration loops, and very very fast deployments.": "Fresh是一个面向JavaScript和TypeScript开发者的全栈式现代Web框架，旨在使创建高质量、高性能和个性化的Web应用变得轻而易举。你可以用它来创建你的主页、博客、像GitHub或Twitter这样的大型网络应用，或者其他你能想到的东西。\n\nFresh的核心是一个路由框架和模板引擎的组合，在服务器上按需渲染页面。除了在服务器上的这种及时（JIT）渲染之外，Fresh还提供了一个接口，用于在客户端无缝渲染一些组件，以获得最大的互动性。该框架在服务器和客户端都使用[Preact](https://preactjs.com/)和JSX进行渲染和模板制作。\n\nFresh也没有一个构建步骤。你写的代码也直接是在服务器上运行的代码，以及在客户端执行的代码。任何必要的TypeScript或JSX到普通JavaScript的转换都是在飞行中完成的，就在需要的时候。这使得迭代循环快得惊人，部署也非常快。",
  "cache.get(text": "cache.get(text",
  "## Why Another Markdown Editor?\n\nI like Mou. I write Markdown all the time, and since I use macOS on a daily basis, Mou is my go-to editor whenever I wish to generate something with markup. But I had always wanted something more.\n\nIt came as a great shock when Chen Luo announced that he felt he could not actively continue the development, and wished to [sell the ownership of Mou](http://www.v2ex.com/t/112732). [No suitable offers surfaced](http://www.v2ex.com/t/113734) (I honestly do not think there will be, either), and I decided that instead of waiting for others to do something about this, I should act myself.\n\nI don’t have nearly enough money to match Chen Luo’s purposed offer, but I do have my own pocket of tricks and some free time. So I started from scratch, spent some weekends hacking together my own solution. And this is the result.\n\n## What’s in the Box?\n\nMacDown is heavily influenced by Mou, and I try to mimic much of its behaviour as much as possible both in UI and the logic underneath, only making changes when I feel that improvement is necessary. Highlights include:\n\n*   Highly customisable Markdown rendering.\n*   Syntax highlighting in fenced code blocks.\n*   Sophisticated auto-completion.": "## 为什么是另一个Markdown编辑器？\n\n我喜欢Mou。我一直在写Markdown，而且因为我每天都在使用macOS，所以每当我想生成一些带标记的东西时，Mou就是我的首选编辑器。但我一直想要更多的东西。\n\n当Chen Luo宣布他认为他不能积极地继续开发，并希望[出售Mou的所有权](http://www.v2ex.com/t/112732)时，这让我感到非常震惊。[没有合适的报价出现](http://www.v2ex.com/t/113734)（说实话，我也不认为会有），我决定与其等着别人来做这件事，不如我自己行动。\n\n我没有足够的钱来匹配陈洛的目的性报价，但我有自己的口袋里的招数和一些自由时间。所以我从头开始，花了一些周末的时间，把我自己的解决方案砍掉。这就是结果。\n\n## 盒子里有什么？\n\nMacDown在很大程度上受到Mou的影响，我尽可能地模仿它的大部分行为，包括用户界面和下面的逻辑，只有在我觉得有必要改进的时候才会做出改变。亮点包括。\n\n* 高度可定制的Markdown渲染。 * 栅栏式代码块中的语法高亮显示。",
  "module.exports \\= async": "module.exports （出口）= async",
  "absNewFile": "荒诞的新文件"
}